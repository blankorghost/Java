package reflection;

public class ClassDemo1 {
	
	public static void main(String[] args){
		//Food 实例对象
		Foo foo1 = new Foo();
		//任何一个类都是Class的实例对象，有三种表示方式
		//1.=>任何一个类都有一个隐含的静态成员变量class
		Class c1 = Foo.class;
		
		//2.已知该类的对象通过getClass方法
		Class c2 = foo1.getClass();
		
		/**
		 * 官网c1，c2表示了Foo类的类类型
		 * 万事万物皆对象
		 * 类也是对象，是Class类的实例对象
		 * 这个对象我们称为该类的类类型
		 * */
		System.out.println(c1==c2);
		
		//3.
		Class c3 = null;
		try {
			c3 = Class.forName("reflection.Foo");
		}catch (ClassNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		System.out.println(c2==c3);
		
		//我们可以通过类的类类型创建该类的对象实例--->通过出c1 or c2 orc3创建Foo的实例
		try {
			Foo foo = (Foo)c1.newInstance();   //需要有无参数的构造方法       
			foo.print();
		} catch (InstantiationException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IllegalAccessException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}      
	}
	
}

class Foo{
	void print(){
		System.out.println("foo");
	}
}